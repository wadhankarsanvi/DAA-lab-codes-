#include <stdio.h>
#define INF 99999
#define MAX_N 20 // Maximum value for N
#define INFI 100

void floydMarshall(int graph[MAX_N][MAX_N], int n){
	int i, j, k;
	for(k=0;k<n;k++){
		for(i = 0;i <n;i++){
			for(j = 0; j<n;j++){
				if(graph[i][j]> graph[i][k] + graph[k][j])
					graph[i][j] = graph[i][k] + graph[k][j];
			}
		}
	}
}

void printMatrix(int dist[MAX_N][MAX_N], int n){
	printf("The following matrix shows the shortest distances between all pairs of the vertices.\n");
	for(int i=0 ;i<n;i++){
		for(int j=0;j<n;j++){
				if(dist[i][j] == INFI)
				printf(" %4s","INF");
			else
				printf(" %4d", dist[i][j]);
		}
		printf("\n");
	}
}

int main(void){
	int n , i ,j,e;
	int graph[MAX_N][MAX_N];
	printf("Enter the number of vertices : ");
	scanf("%d", &n);
	
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			if(i==j)
				graph[i][j] = 0;
			else
				graph[i][j] = 100;
		}
	}
	printf("Enter the number of edges : ");
	scanf("%d", &e);

	for(i = 0; i<e;i++){
		int u , v ,w;
		printf("Enter source : ");
		scanf("%d",&u);
		printf("Enter destination : ");
		scanf("%d",&v);
		printf("Enter weight : ");
		scanf("%d" ,&w);
		graph[u-1][v-1] = w;
	}
	floydMarshall(graph,n);
	printMatrix(graph,n);
	return 0;
}
