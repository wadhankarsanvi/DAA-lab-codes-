#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define INF 9999

int find(int parent[], int i) {
	if(parent[i] != i)
		parent[i]= find(parent, parent[i]);
	return parent[i];
}


void union1(int parent[], int rank[], int i, int j) {
	int iroot = find(parent,i);
	int jroot = find(parent,j);

	if(rank[iroot]<rank[jroot]){
		parent[iroot] = jroot;
	}
	else if(rank[iroot] > rank[jroot]){
		parent[jroot] = iroot;
	}
	else{
		parent[jroot] = iroot;
		rank[iroot]++;
	}
}

void kruskalMST(int **cost, int V) {
		parent[i] = i;
		rank[i] = 0;
	}
	int edgeCount = 0;
	int minCost = 0;
	int edgeNumber = 0;

	while(edgeCount< V-1){
		int min = INF;
		int a = -1, b = -1;
		for(int i= 0; i<V;i++){
			for(int j=0; j<V;j++){
				if(cost[i][j]<min){
					min = cost[i][j];
					a = i;
					b = j;
				}
			}
		}
		if(a == -1 || b == -1) break;
		int rootA = find(parent,a);
		int rootB = find(parent,b);
		if(rootA != rootB){
			printf("Edge %d:(%d, %d) cost:%d\n",edgeNumber++, a ,b,min);
			minCost +=min;
			union1(parent,rank,rootA,rootB);
			edgeCount++;
		}
		cost[a][b] = cost[b][a] = INF;
	}
	printf("Minimum cost= %d\n",minCost);
}

int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
